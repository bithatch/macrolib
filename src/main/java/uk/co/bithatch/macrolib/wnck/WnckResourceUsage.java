/**
 * Java WNCK bindings
 * Copyright Â© 2020 Bithatch (tanktarta@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package uk.co.bithatch.macrolib.wnck;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Structure.FieldOrder;


/**
 * WnckResourceUsage:<br>.
 *
 * {@link #total_bytes_estimate}: estimation of the total number of bytes allocated in<br>
 * the X server.<br>
 * {@link #pixmap_bytes}: number of bytes allocated in the X server for resources of<br>
 * type Pixmap.<br>
 * {@link #n_pixmaps}: number of Pixmap resources allocated.<br>
 * {@link #n_windows}: number of Window resources allocated.<br>
 * {@link #n_gcs}: number of GContext resources allocated.<br>
 * {@link #n_pictures}: number of Picture resources allocated.<br>
 * {@link #n_glyphsets}: number of Glyphset resources allocated.<br>
 * {@link #n_fonts}: number of Font resources allocated.<br>
 * {@link #n_colormap_entries}: number of Colormap resources allocated.<br>
 * {@link #n_passive_grabs}: number of PassiveGrab resources allocated.<br>
 * {@link #n_cursors}: number of Cursor resources allocated.<br>
 * {@link #n_other}: number of other resources allocated.<br>
 * The #WnckResourceUsage struct contains information about the total resource<br>
 * usage of an X client, and the number of resources allocated for each<br>
 * resource type.<br>
 * Since: 2.6<br>
 * <i>native declaration : libwnck/util.h:29</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@FieldOrder({"total_bytes_estimate", "pixmap_bytes", "n_pixmaps", "n_windows", "n_gcs", "n_pictures", "n_glyphsets", "n_fonts", "n_colormap_entries", "n_passive_grabs", "n_cursors", "n_other", "pad1", "pad2", "pad3", "pad4", "pad5", "pad6", "pad7", "pad8", "pad9"})
public class WnckResourceUsage extends Structure {
	
	/**
	 * The Class ByReference.
	 */
	public static class ByReference extends WnckResourceUsage implements Structure.ByReference {
		
	}
	
	/**
	 * The Class ByValue.
	 */
	public static class ByValue extends WnckResourceUsage implements Structure.ByValue {
		
	}
	
	/** The n colormap entries. */
	public int n_colormap_entries;
	
	/** The n cursors. */
	public int n_cursors;
	
	/** The n fonts. */
	public int n_fonts;
	
	/** The n gcs. */
	public int n_gcs;
	
	/** The n glyphsets. */
	public int n_glyphsets;
	
	/** The n other. */
	public int n_other;
	
	/** The n passive grabs. */
	public int n_passive_grabs;
	
	/** The n pictures. */
	public int n_pictures;
	
	/** The n pixmaps. */
	public int n_pixmaps;
	
	/** The n windows. */
	public int n_windows;
	
	/** The pad 1. */
	public int pad1;
	
	/** The pad 2. */
	public int pad2;
	
	/** The pad 3. */
	public int pad3;
	
	/** The pad 4. */
	public int pad4;
	
	/** The pad 5. */
	public int pad5;
	
	/** The pad 6. */
	public NativeLong pad6;
	
	/** The pad 7. */
	public NativeLong pad7;
	
	/** The pad 8. */
	public NativeLong pad8;
	
	/** The pad 9. */
	public NativeLong pad9;
	
	/**  C type : gulong. */
	public NativeLong pixmap_bytes;
	
	/**  C type : gulong. */
	public NativeLong total_bytes_estimate;
	
	/**
	 * Instantiates a new wnck resource usage.
	 */
	public WnckResourceUsage() {
		super();
	};
	
	/**
	 * Instantiates a new wnck resource usage.
	 *
	 * @param peer the peer
	 */
	public WnckResourceUsage(Pointer peer) {
		super(peer);
	};
}
