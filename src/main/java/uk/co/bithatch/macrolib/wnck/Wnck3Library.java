/**
 * Java WNCK bindings
 * Copyright Â© 2020 Bithatch (tanktarta@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package uk.co.bithatch.macrolib.wnck;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
import java.util.Arrays;
import java.util.List;

/**
 * JNA Wrapper for library <b>wnck-3</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Wnck3Library extends Library {
	
	/**
	 * <i>native declaration : libwnck/screen.h</i><br>
	 * enum values
	 */
	public static interface _WnckLayoutCorner {
		/** <i>native declaration : libwnck/screen.h:162</i> */
		public static final int WNCK_LAYOUT_CORNER_BOTTOMLEFT = 3;
		/** <i>native declaration : libwnck/screen.h:161</i> */
		public static final int WNCK_LAYOUT_CORNER_BOTTOMRIGHT = 2;
		/** <i>native declaration : libwnck/screen.h:159</i> */
		public static final int WNCK_LAYOUT_CORNER_TOPLEFT = 0;
		/** <i>native declaration : libwnck/screen.h:160</i> */
		public static final int WNCK_LAYOUT_CORNER_TOPRIGHT = 1;
	}
	
	/**
	 * <i>native declaration : libwnck/screen.h</i><br>
	 * enum values
	 */
	public static interface _WnckLayoutOrientation {
		/** <i>native declaration : libwnck/screen.h:139</i> */
		public static final int WNCK_LAYOUT_ORIENTATION_HORIZONTAL = 0;
		/** <i>native declaration : libwnck/screen.h:140</i> */
		public static final int WNCK_LAYOUT_ORIENTATION_VERTICAL = 1;
	}
	
	/**
	 * The Class actions_changed_callback.
	 */
	public static class actions_changed_callback extends PointerType {
		
		/**
		 * Instantiates a new actions changed callback.
		 */
		public actions_changed_callback() {
			super();
		}
		
		/**
		 * Instantiates a new actions changed callback.
		 *
		 * @param address the address
		 */
		public actions_changed_callback(Pointer address) {
			super(address);
		}
	}
	/**
	 * The Class gboolean.
	 */
	public static class gboolean extends PointerType {
		
		/**
		 * Instantiates a new gboolean.
		 */
		public gboolean() {
			super();
		}
		
		/**
		 * Instantiates a new gboolean.
		 *
		 * @param address the address
		 */
		public gboolean(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GdkDisplay.
	 */
	public static class GdkDisplay extends PointerType {
		
		/**
		 * Instantiates a new gdk display.
		 */
		public GdkDisplay() {
			super();
		}
		
		/**
		 * Instantiates a new gdk display.
		 *
		 * @param address the address
		 */
		public GdkDisplay(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GdkPixbuf.
	 */
	public static class GdkPixbuf extends PointerType {
		
		/**
		 * Instantiates a new gdk pixbuf.
		 */
		public GdkPixbuf() {
			super();
		}
		
		/**
		 * Instantiates a new gdk pixbuf.
		 *
		 * @param address the address
		 */
		public GdkPixbuf(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class gint.
	 */
	public static class gint extends PointerType {
		
		/**
		 * Instantiates a new gint.
		 */
		public gint() {
			super();
		}
		
		/**
		 * Instantiates a new gint.
		 *
		 * @param address the address
		 */
		public gint(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GList.
	 */
	public static class GList extends Structure {
		
		/** The data. */
		public Pointer data;
		
		/** The next. */
        public Pointer next; 
		
		/** The previous. */
        public Pointer previous;
        
        /**
		 * Instantiates a new g list.
		 */
		public GList() {
			super();
		}
        
        /**
		 * Instantiates a new g list.
		 *
		 * @param address the address
		 */
		public GList(Pointer address) {
			super(address);
		}

        @Override
        protected List<String> getFieldOrder() {
            return Arrays.asList("data", "next", "previous");
        }
	};
	/**
	 * The Class GObject.
	 */
	public static class GObject extends PointerType {
		
		/**
		 * Instantiates a new g object.
		 */
		public GObject() {
			super();
		}
		
		/**
		 * Instantiates a new g object.
		 *
		 * @param address the address
		 */
		public GObject(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GObjectClass.
	 */
	public static class GObjectClass extends PointerType {
		
		/**
		 * Instantiates a new g object class.
		 */
		public GObjectClass() {
			super();
		}
		
		/**
		 * Instantiates a new g object class.
		 *
		 * @param address the address
		 */
		public GObjectClass(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class gsize.
	 */
	public static class gsize extends PointerType {
		
		/**
		 * Instantiates a new gsize.
		 */
		public gsize() {
			super();
		}
		
		/**
		 * Instantiates a new gsize.
		 *
		 * @param address the address
		 */
		public gsize(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GtkContainer.
	 */
	public static class GtkContainer extends PointerType {
		
		/**
		 * Instantiates a new gtk container.
		 */
		public GtkContainer() {
			super();
		}
		
		/**
		 * Instantiates a new gtk container.
		 *
		 * @param address the address
		 */
		public GtkContainer(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GtkContainerClass.
	 */
	public static class GtkContainerClass extends PointerType {
		
		/**
		 * Instantiates a new gtk container class.
		 */
		public GtkContainerClass() {
			super();
		}
		
		/**
		 * Instantiates a new gtk container class.
		 *
		 * @param address the address
		 */
		public GtkContainerClass(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GtkMenu.
	 */
	public static class GtkMenu extends PointerType {
		
		/**
		 * Instantiates a new gtk menu.
		 */
		public GtkMenu() {
			super();
		}
		
		/**
		 * Instantiates a new gtk menu.
		 *
		 * @param address the address
		 */
		public GtkMenu(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GtkMenuBar.
	 */
	public static class GtkMenuBar extends PointerType {
		
		/**
		 * Instantiates a new gtk menu bar.
		 */
		public GtkMenuBar() {
			super();
		}
		
		/**
		 * Instantiates a new gtk menu bar.
		 *
		 * @param address the address
		 */
		public GtkMenuBar(Pointer address) {
			super(address);
		}
	};
	/**
	 * The Class GtkMenuBarClass.
	 */
	public static class GtkMenuBarClass extends PointerType {
		
		/**
		 * Instantiates a new gtk menu bar class.
		 */
		public GtkMenuBarClass() {
			super();
		}
		
		/**
		 * Instantiates a new gtk menu bar class.
		 *
		 * @param address the address
		 */
		public GtkMenuBarClass(Pointer address) {
			super(address);
		}
	}
	/**
	 * The Class GtkMenuClass.
	 */
	public static class GtkMenuClass extends PointerType {
		
		/**
		 * Instantiates a new gtk menu class.
		 */
		public GtkMenuClass() {
			super();
		}
		
		/**
		 * Instantiates a new gtk menu class.
		 *
		 * @param address the address
		 */
		public GtkMenuClass(Pointer address) {
			super(address);
		}
	}
	/**
	 * The Class GtkWidget.
	 */
	public static class GtkWidget extends PointerType {
		
		/**
		 * Instantiates a new gtk widget.
		 */
		public GtkWidget() {
			super();
		}
		
		/**
		 * Instantiates a new gtk widget.
		 *
		 * @param address the address
		 */
		public GtkWidget(Pointer address) {
			super(address);
		}
	}
	/**
	 * The Class GType.
	 */
	public static class GType extends PointerType {
		
		/**
		 * Instantiates a new g type.
		 */
		public GType() {
			super();
		}
		
		/**
		 * Instantiates a new g type.
		 *
		 * @param address the address
		 */
		public GType(Pointer address) {
			super(address);
		}
	}
	/**
	 * The Class guint32.
	 */
	public static class guint32 extends PointerType {
		
		/**
		 * Instantiates a new guint 32.
		 */
		public guint32() {
			super();
		}
		
		/**
		 * Instantiates a new guint 32.
		 *
		 * @param address the address
		 */
		public guint32(Pointer address) {
			super(address);
		}
	}
	/**
	 * The Class state_changed_callback.
	 */
	public static class state_changed_callback extends PointerType {
		
		/**
		 * Instantiates a new state changed callback.
		 */
		public state_changed_callback() {
			super();
		}
		
		/**
		 * Instantiates a new state changed callback.
		 *
		 * @param address the address
		 */
		public state_changed_callback(Pointer address) {
			super(address);
		}
	};
	
	/**
	 * The Class WnckActionMenuPrivate.
	 */
	public static class WnckActionMenuPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck action menu private.
		 */
		public WnckActionMenuPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck action menu private.
		 *
		 * @param address the address
		 */
		public WnckActionMenuPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * The Class WnckApplicationPrivate.
	 */
	public static class WnckApplicationPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck application private.
		 */
		public WnckApplicationPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck application private.
		 *
		 * @param address the address
		 */
		public WnckApplicationPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * The Class WnckClassGroupPrivate.
	 */
	public static class WnckClassGroupPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck class group private.
		 */
		public WnckClassGroupPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck class group private.
		 *
		 * @param address the address
		 */
		public WnckClassGroupPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * <i>native declaration : libwnck/util.h</i><br>
	 * enum values
	 */
	public static interface WnckClientType {
		/** <i>native declaration : libwnck/util.h:69</i> */
		public static final int WNCK_CLIENT_TYPE_APPLICATION = 1;
		/** <i>native declaration : libwnck/util.h:70</i> */
		public static final int WNCK_CLIENT_TYPE_PAGER = 2;
	}
	
	/** <i>native declaration : libwnck/tasklist.h</i> */
	public interface WnckLoadIconFunction extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param icon_name the icon name
		 * @param size the size
		 * @param flags the flags
		 * @param data the data
		 * @return the pointer by reference
		 */
		PointerByReference apply(Pointer icon_name, int size, int flags, Pointer data);
	}
	
	/**
	 * <i>native declaration : libwnck/workspace.h</i><br>
	 * enum values
	 */
	public static interface WnckMotionDirection {
		/** <i>native declaration : libwnck/workspace.h:58</i> */
		public static final int WNCK_MOTION_DOWN = -2;
		/** <i>native declaration : libwnck/workspace.h:59</i> */
		public static final int WNCK_MOTION_LEFT = -3;
		/** <i>native declaration : libwnck/workspace.h:60</i> */
		public static final int WNCK_MOTION_RIGHT = -4;
		/** <i>native declaration : libwnck/workspace.h:57</i> */
		public static final int WNCK_MOTION_UP = -1;
	}
	
	/**
	 * <i>native declaration : libwnck/pager.h</i><br>
	 * enum values
	 */
	public static interface WnckPagerDisplayMode {
		/** <i>native declaration : libwnck/pager.h:50</i> */
		public static final int WNCK_PAGER_DISPLAY_CONTENT = 1;
		/** <i>native declaration : libwnck/pager.h:49</i> */
		public static final int WNCK_PAGER_DISPLAY_NAME = 0;
	}
	
	/**
	 * The Class WnckPagerPrivate.
	 */
	public static class WnckPagerPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck pager private.
		 */
		public WnckPagerPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck pager private.
		 *
		 * @param address the address
		 */
		public WnckPagerPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * <i>native declaration : libwnck/pager.h</i><br>
	 * enum values
	 */
	public static interface WnckPagerScrollMode {
		/** <i>native declaration : libwnck/pager.h:66</i> */
		public static final int WNCK_PAGER_SCROLL_1D = 1;
		/** <i>native declaration : libwnck/pager.h:65</i> */
		public static final int WNCK_PAGER_SCROLL_2D = 0;
	}
	
	/**
	 * The Class WnckScreenPrivate.
	 */
	public static class WnckScreenPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck screen private.
		 */
		public WnckScreenPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck screen private.
		 *
		 * @param address the address
		 */
		public WnckScreenPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * The Class WnckSelectorPrivate.
	 */
	public static class WnckSelectorPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck selector private.
		 */
		public WnckSelectorPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck selector private.
		 *
		 * @param address the address
		 */
		public WnckSelectorPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * <i>native declaration : libwnck/tasklist.h</i><br>
	 * enum values
	 */
	public static interface WnckTasklistGroupingType {
		/** <i>native declaration : libwnck/tasklist.h:55</i> */
		public static final int WNCK_TASKLIST_ALWAYS_GROUP = 2;
		/** <i>native declaration : libwnck/tasklist.h:54</i> */
		public static final int WNCK_TASKLIST_AUTO_GROUP = 1;
		/** <i>native declaration : libwnck/tasklist.h:53</i> */
		public static final int WNCK_TASKLIST_NEVER_GROUP = 0;
	}
	
	/**
	 * The Class WnckTasklistPrivate.
	 */
	public static class WnckTasklistPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck tasklist private.
		 */
		public WnckTasklistPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck tasklist private.
		 *
		 * @param address the address
		 */
		public WnckTasklistPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * <i>native declaration : libwnck/window.h</i><br>
	 * enum values
	 */
	public static interface WnckWindowActions {
		/** <i>native declaration : libwnck/window.h:127</i> */
		public static final int WNCK_WINDOW_ACTION_ABOVE = 1 << 17;
		/** <i>native declaration : libwnck/window.h:128</i> */
		public static final int WNCK_WINDOW_ACTION_BELOW = 1 << 18;
		/**
		 * includes pin/unpin<br>
		 * <i>native declaration : libwnck/window.h:116</i>
		 */
		public static final int WNCK_WINDOW_ACTION_CHANGE_WORKSPACE = 1 << 6;
		/** <i>native declaration : libwnck/window.h:117</i> */
		public static final int WNCK_WINDOW_ACTION_CLOSE = 1 << 7;
		/** <i>native declaration : libwnck/window.h:126</i> */
		public static final int WNCK_WINDOW_ACTION_FULLSCREEN = 1 << 16;
		/** <i>native declaration : libwnck/window.h:124</i> */
		public static final int WNCK_WINDOW_ACTION_MAXIMIZE = 1 << 14;
		/** <i>native declaration : libwnck/window.h:114</i> */
		public static final int WNCK_WINDOW_ACTION_MAXIMIZE_HORIZONTALLY = 1 << 4;
		/** <i>native declaration : libwnck/window.h:115</i> */
		public static final int WNCK_WINDOW_ACTION_MAXIMIZE_VERTICALLY = 1 << 5;
		/** <i>native declaration : libwnck/window.h:122</i> */
		public static final int WNCK_WINDOW_ACTION_MINIMIZE = 1 << 12;
		/** <i>native declaration : libwnck/window.h:110</i> */
		public static final int WNCK_WINDOW_ACTION_MOVE = 1 << 0;
		/** <i>native declaration : libwnck/window.h:111</i> */
		public static final int WNCK_WINDOW_ACTION_RESIZE = 1 << 1;
		/** <i>native declaration : libwnck/window.h:112</i> */
		public static final int WNCK_WINDOW_ACTION_SHADE = 1 << 2;
		/** <i>native declaration : libwnck/window.h:113</i> */
		public static final int WNCK_WINDOW_ACTION_STICK = 1 << 3;
		/** <i>native declaration : libwnck/window.h:125</i> */
		public static final int WNCK_WINDOW_ACTION_UNMAXIMIZE = 1 << 15;
		/** <i>native declaration : libwnck/window.h:118</i> */
		public static final int WNCK_WINDOW_ACTION_UNMAXIMIZE_HORIZONTALLY = 1 << 8;
		/** <i>native declaration : libwnck/window.h:119</i> */
		public static final int WNCK_WINDOW_ACTION_UNMAXIMIZE_VERTICALLY = 1 << 9;
		/** <i>native declaration : libwnck/window.h:123</i> */
		public static final int WNCK_WINDOW_ACTION_UNMINIMIZE = 1 << 13;
		/** <i>native declaration : libwnck/window.h:120</i> */
		public static final int WNCK_WINDOW_ACTION_UNSHADE = 1 << 10;
		/** <i>native declaration : libwnck/window.h:121</i> */
		public static final int WNCK_WINDOW_ACTION_UNSTICK = 1 << 11;
	}
	
	/**
	 * <i>native declaration : libwnck/window.h</i><br>
	 * enum values
	 */
	public static interface WnckWindowGravity {
		/** <i>native declaration : libwnck/window.h:194</i> */
		public static final int WNCK_WINDOW_GRAVITY_CENTER = 5;
		/** <i>native declaration : libwnck/window.h:189</i> */
		public static final int WNCK_WINDOW_GRAVITY_CURRENT = 0;
		/** <i>native declaration : libwnck/window.h:195</i> */
		public static final int WNCK_WINDOW_GRAVITY_EAST = 6;
		/** <i>native declaration : libwnck/window.h:191</i> */
		public static final int WNCK_WINDOW_GRAVITY_NORTH = 2;
		/** <i>native declaration : libwnck/window.h:192</i> */
		public static final int WNCK_WINDOW_GRAVITY_NORTHEAST = 3;
		/** <i>native declaration : libwnck/window.h:190</i> */
		public static final int WNCK_WINDOW_GRAVITY_NORTHWEST = 1;
		/** <i>native declaration : libwnck/window.h:197</i> */
		public static final int WNCK_WINDOW_GRAVITY_SOUTH = 8;
		/** <i>native declaration : libwnck/window.h:198</i> */
		public static final int WNCK_WINDOW_GRAVITY_SOUTHEAST = 9;
		/** <i>native declaration : libwnck/window.h:196</i> */
		public static final int WNCK_WINDOW_GRAVITY_SOUTHWEST = 7;
		/** <i>native declaration : libwnck/window.h:199</i> */
		public static final int WNCK_WINDOW_GRAVITY_STATIC = 10;
		/** <i>native declaration : libwnck/window.h:193</i> */
		public static final int WNCK_WINDOW_GRAVITY_WEST = 4;
	}
	
	/**
	 * <i>native declaration : libwnck/window.h</i><br>
	 * enum values
	 */
	public static interface WnckWindowMoveResizeMask {
		/** <i>native declaration : libwnck/window.h:219</i> */
		public static final int WNCK_WINDOW_CHANGE_HEIGHT = 1 << 3;
		/** <i>native declaration : libwnck/window.h:218</i> */
		public static final int WNCK_WINDOW_CHANGE_WIDTH = 1 << 2;
		/** <i>native declaration : libwnck/window.h:216</i> */
		public static final int WNCK_WINDOW_CHANGE_X = 1 << 0;
		/** <i>native declaration : libwnck/window.h:217</i> */
		public static final int WNCK_WINDOW_CHANGE_Y = 1 << 1;
	}
	
	/**
	 * The Class WnckWindowPrivate.
	 */
	public static class WnckWindowPrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck window private.
		 */
		public WnckWindowPrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck window private.
		 *
		 * @param address the address
		 */
		public WnckWindowPrivate(Pointer address) {
			super(address);
		}
	}
	
	/**
	 * <i>native declaration : libwnck/window.h</i><br>
	 * enum values
	 */
	public static interface WnckWindowState {
		/** <i>native declaration : libwnck/window.h:74</i> */
		public static final int WNCK_WINDOW_STATE_ABOVE = 1 << 11;
		/** <i>native declaration : libwnck/window.h:75</i> */
		public static final int WNCK_WINDOW_STATE_BELOW = 1 << 12;
		/** <i>native declaration : libwnck/window.h:72</i> */
		public static final int WNCK_WINDOW_STATE_DEMANDS_ATTENTION = 1 << 9;
		/** <i>native declaration : libwnck/window.h:71</i> */
		public static final int WNCK_WINDOW_STATE_FULLSCREEN = 1 << 8;
		/** <i>native declaration : libwnck/window.h:70</i> */
		public static final int WNCK_WINDOW_STATE_HIDDEN = 1 << 7;
		/** <i>native declaration : libwnck/window.h:64</i> */
		public static final int WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY = 1 << 1;
		/** <i>native declaration : libwnck/window.h:65</i> */
		public static final int WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY = 1 << 2;
		/** <i>native declaration : libwnck/window.h:63</i> */
		public static final int WNCK_WINDOW_STATE_MINIMIZED = 1 << 0;
		/** <i>native declaration : libwnck/window.h:66</i> */
		public static final int WNCK_WINDOW_STATE_SHADED = 1 << 3;
		/** <i>native declaration : libwnck/window.h:67</i> */
		public static final int WNCK_WINDOW_STATE_SKIP_PAGER = 1 << 4;
		/** <i>native declaration : libwnck/window.h:68</i> */
		public static final int WNCK_WINDOW_STATE_SKIP_TASKLIST = 1 << 5;
		/** <i>native declaration : libwnck/window.h:69</i> */
		public static final int WNCK_WINDOW_STATE_STICKY = 1 << 6;
		/** <i>native declaration : libwnck/window.h:73</i> */
		public static final int WNCK_WINDOW_STATE_URGENT = 1 << 10;
	}
	
	/**
	 * <i>native declaration : libwnck/window.h</i><br>
	 * enum values
	 */
	public static interface WnckWindowType {
		/**
		 * desktop background<br>
		 * <i>native declaration : libwnck/window.h:149</i>
		 */
		public static final int WNCK_WINDOW_DESKTOP = 1;
		/**
		 * dialog<br>
		 * <i>native declaration : libwnck/window.h:151</i>
		 */
		public static final int WNCK_WINDOW_DIALOG = 3;
		/**
		 * panel<br>
		 * <i>native declaration : libwnck/window.h:150</i>
		 */
		public static final int WNCK_WINDOW_DOCK = 2;
		/**
		 * tearoff menu<br>
		 * <i>native declaration : libwnck/window.h:153</i>
		 */
		public static final int WNCK_WINDOW_MENU = 5;
		/**
		 * document/app window<br>
		 * <i>native declaration : libwnck/window.h:148</i>
		 */
		public static final int WNCK_WINDOW_NORMAL = 0;
		/**
		 * splash screen<br>
		 * <i>native declaration : libwnck/window.h:155</i>
		 */
		public static final int WNCK_WINDOW_SPLASHSCREEN = 7;
		/**
		 * tearoff toolbar<br>
		 * <i>native declaration : libwnck/window.h:152</i>
		 */
		public static final int WNCK_WINDOW_TOOLBAR = 4;
		/**
		 * palette/toolbox window<br>
		 * <i>native declaration : libwnck/window.h:154</i>
		 */
		public static final int WNCK_WINDOW_UTILITY = 6;
	}
	
	/**
	 * The Class WnckWorkspacePrivate.
	 */
	public static class WnckWorkspacePrivate extends PointerType {
		
		/**
		 * Instantiates a new wnck workspace private.
		 */
		public WnckWorkspacePrivate() {
			super();
		}
		
		/**
		 * Instantiates a new wnck workspace private.
		 *
		 * @param address the address
		 */
		public WnckWorkspacePrivate(Pointer address) {
			super(address);
		}
	}
	
	/** The Constant INSTANCE. */
	public static final Wnck3Library INSTANCE = Native.load(Wnck3Library.JNA_LIBRARY_NAME, Wnck3Library.class);
	
	/** The Constant JNA_LIBRARY_NAME. */
	public static final String JNA_LIBRARY_NAME = "wnck-3";
	
	/** The Constant JNA_NATIVE_LIB. */
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Wnck3Library.JNA_LIBRARY_NAME);
	
	/** <i>native declaration : libwnck/util.h</i> */
	public static final int WNCK_DEFAULT_ICON_SIZE = 32;
	
	/** <i>native declaration : libwnck/util.h</i> */
	public static final int WNCK_DEFAULT_MINI_ICON_SIZE = 16;
	
	/** <i>native declaration : libwnck/version.h</i> */
	public static final int WNCK_MAJOR_VERSION = (3);
	
	/** <i>native declaration : libwnck/version.h</i> */
	public static final int WNCK_MICRO_VERSION = (0);
	
	/** <i>native declaration : libwnck/version.h</i> */
	public static final int WNCK_MINOR_VERSION = (36);
	
	/**
	 * Original signature : <code>void _wnck_screen_get_workspace_layout(WnckScreen*, _WnckLayoutOrientation*, int*, int*, _WnckLayoutCorner*)</code><br>
	 * <i>native declaration : libwnck/screen.h:195</i>
	 *
	 * @param screen the screen
	 * @param orientation the orientation
	 * @param rows the rows
	 * @param columns the columns
	 * @param starting_corner the starting corner
	 */
	void _wnck_screen_get_workspace_layout(WnckScreen screen, IntBuffer orientation, IntBuffer rows, IntBuffer columns, IntBuffer starting_corner);
	
	/**
	 * Original signature : <code>void _wnck_screen_get_workspace_layout(WnckScreen*, _WnckLayoutOrientation*, int*, int*, _WnckLayoutCorner*)</code><br>
	 * <i>native declaration : libwnck/screen.h:195</i><br>
	 *
	 * @param screen the screen
	 * @param orientation the orientation
	 * @param rows the rows
	 * @param columns the columns
	 * @param starting_corner the starting corner
	 * @deprecated use the safer methods {@link #_wnck_screen_get_workspace_layout(uk.co.bithatch.macrolib.wnck.WnckScreen, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #_wnck_screen_get_workspace_layout(uk.co.bithatch.macrolib.wnck.WnckScreen, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void _wnck_screen_get_workspace_layout(WnckScreen screen, IntByReference orientation, IntByReference rows, IntByReference columns, IntByReference starting_corner);
	
	/**
	 * Original signature : <code>GType _wncklayoutcorner___wnck_layout_corner_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:22</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType _wncklayoutcorner___wnck_layout_corner_get_type();
	
	/**
	 * enumerations from "screen.h"<br>
	 * Original signature : <code>GType _wncklayoutorientation___wnck_layout_orientation_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:18</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType _wncklayoutorientation___wnck_layout_orientation_get_type();
	
	/**
	 * Original signature : <code>GType wnck_action_menu_get_type()</code><br>
	 * <i>native declaration : libwnck/window-action-menu.h:39</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_action_menu_get_type();
	
	/**
	 * Original signature : <code>GtkWidget* wnck_action_menu_new(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window-action-menu.h:41</i>
	 *
	 * @param window the window
	 * @return the pointer by reference
	 */
	PointerByReference wnck_action_menu_new(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckApplication* wnck_application_get(gulong)</code><br>
	 * <i>native declaration : libwnck/application.h:46</i>
	 *
	 * @param xwindow the xwindow
	 * @return the wnck application
	 */
	WnckApplication wnck_application_get(NativeLong xwindow);
	
	/**
	 * Original signature : <code>GdkPixbuf* wnck_application_get_icon(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:61</i>
	 *
	 * @param app the app
	 * @return the pointer by reference
	 */
	PointerByReference wnck_application_get_icon(WnckApplication app);
	
	/**
	 * Original signature : <code>gboolean wnck_application_get_icon_is_fallback(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:63</i>
	 *
	 * @param app the app
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_application_get_icon_is_fallback(WnckApplication app);
	
	/**
	 * Original signature : <code>char* wnck_application_get_icon_name(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:59</i>
	 *
	 * @param app the app
	 * @return the string
	 */
	String wnck_application_get_icon_name(WnckApplication app);
	
	/**
	 * Original signature : <code>GdkPixbuf* wnck_application_get_mini_icon(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:62</i>
	 *
	 * @param app the app
	 * @return the pointer by reference
	 */
	PointerByReference wnck_application_get_mini_icon(WnckApplication app);
	
	/**
	 * Original signature : <code>int wnck_application_get_n_windows(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:51</i>
	 *
	 * @param app the app
	 * @return the int
	 */
	int wnck_application_get_n_windows(WnckApplication app);
	
	/**
	 * application_get_name, application_get_pid, etc.; prefer to read<br>
	 * properties straight off the group leader, and failing that, if the<br>
	 * prop is the same for all windows in the app, return the values for<br>
	 * the window. Failing that, they make stuff up.<br>
	 * Original signature : <code>char* wnck_application_get_name(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:58</i>
	 *
	 * @param app the app
	 * @return the string
	 */
	String wnck_application_get_name(WnckApplication app);
	
	/**
	 * Original signature : <code>int wnck_application_get_pid(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:60</i>
	 *
	 * @param app the app
	 * @return the int
	 */
	int wnck_application_get_pid(WnckApplication app);
	
	/**
	 * Original signature : <code>char* wnck_application_get_startup_id(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:64</i>
	 *
	 * @param app the app
	 * @return the string
	 */
	String wnck_application_get_startup_id(WnckApplication app);
	
	/**
	 * Original signature : <code>GType wnck_application_get_type()</code><br>
	 * <i>native declaration : libwnck/application.h:44</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_application_get_type();
	
	/**
	 * Original signature : <code>GList* wnck_application_get_windows(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:50</i>
	 *
	 * @param app the app
	 * @return the pointer by reference
	 */
	PointerByReference wnck_application_get_windows(WnckApplication app);
	
	/**
	 * Original signature : <code>gulong wnck_application_get_xid(WnckApplication*)</code><br>
	 * <i>native declaration : libwnck/application.h:48</i>
	 *
	 * @param app the app
	 * @return the native long
	 */
	NativeLong wnck_application_get_xid(WnckApplication app);
	
	/**
	 * Original signature : <code>WnckClassGroup* wnck_class_group_get(const char*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:43</i><br>
	 *
	 * @param id the id
	 * @return the wnck class group
	 * @deprecated use the safer methods {@link #wnck_class_group_get(java.lang.String)} and {@link #wnck_class_group_get(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	WnckClassGroup wnck_class_group_get(Pointer id);
	
	/**
	 * Original signature : <code>WnckClassGroup* wnck_class_group_get(const char*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:43</i>
	 *
	 * @param id the id
	 * @return the wnck class group
	 */
	WnckClassGroup wnck_class_group_get(String id);
	
	/**
	 * Original signature : <code>GdkPixbuf* wnck_class_group_get_icon(WnckClassGroup*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:50</i>
	 *
	 * @param class_group the class group
	 * @return the pointer by reference
	 */
	PointerByReference wnck_class_group_get_icon(WnckClassGroup class_group);
	
	/**
	 * Original signature : <code>char* wnck_class_group_get_id(WnckClassGroup*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:46</i>
	 *
	 * @param class_group the class group
	 * @return the string
	 */
	String wnck_class_group_get_id(WnckClassGroup class_group);
	
	/**
	 * Original signature : <code>GdkPixbuf* wnck_class_group_get_mini_icon(WnckClassGroup*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:51</i>
	 *
	 * @param class_group the class group
	 * @return the pointer by reference
	 */
	PointerByReference wnck_class_group_get_mini_icon(WnckClassGroup class_group);
	
	/**
	 * Original signature : <code>char* wnck_class_group_get_name(WnckClassGroup*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:48</i>
	 *
	 * @param class_group the class group
	 * @return the string
	 */
	String wnck_class_group_get_name(WnckClassGroup class_group);
	
	/**
	 * Original signature : <code>char* wnck_class_group_get_res_class(WnckClassGroup*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:55</i>
	 *
	 * @param class_group the class group
	 * @return the string
	 */
	String wnck_class_group_get_res_class(WnckClassGroup class_group);
	
	/**
	 * Original signature : <code>GType wnck_class_group_get_type()</code><br>
	 * <i>native declaration : libwnck/class-group.h:41</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_class_group_get_type();
	
	/**
	 * Original signature : <code>GList* wnck_class_group_get_windows(WnckClassGroup*)</code><br>
	 * <i>native declaration : libwnck/class-group.h:45</i>
	 *
	 * @param class_group the class group
	 * @return the pointer by reference
	 */
	PointerByReference wnck_class_group_get_windows(WnckClassGroup class_group);
	
	/**
	 * enumerations from "util.h"<br>
	 * Original signature : <code>GType wnck_client_type_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:34</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_client_type_get_type();
	
	/**
	 * enumerations from "workspace.h"<br>
	 * Original signature : <code>GType wnck_motion_direction_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:62</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_motion_direction_get_type();
	
	/**
	 * enumerations from "pager.h"<br>
	 * Original signature : <code>GType wnck_pager_display_mode_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:8</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_pager_display_mode_get_type();
	
	/**
	 * Original signature : <code>GType wnck_pager_get_type()</code><br>
	 * <i>native declaration : libwnck/pager.h:69</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_pager_get_type();
	
	/**
	 * Original signature : <code>gboolean wnck_pager_get_wrap_on_scroll(WnckPager*)</code><br>
	 * <i>native declaration : libwnck/pager.h:87</i>
	 *
	 * @param pager the pager
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_pager_get_wrap_on_scroll(WnckPager pager);
	
	/**
	 * Original signature : <code>GtkWidget* wnck_pager_new()</code><br>
	 * <i>native declaration : libwnck/pager.h:71</i>
	 *
	 * @return the pointer by reference
	 */
	PointerByReference wnck_pager_new();
	
	/**
	 * Original signature : <code>GType wnck_pager_scroll_mode_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:12</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_pager_scroll_mode_get_type();
	
	/**
	 * Original signature : <code>void wnck_pager_set_display_mode(WnckPager*, WnckPagerDisplayMode)</code><br>
	 * <i>native declaration : libwnck/pager.h:77</i>
	 *
	 * @param pager the pager
	 * @param mode the mode
	 */
	void wnck_pager_set_display_mode(WnckPager pager, int mode);
	
	/**
	 * Original signature : <code>gboolean wnck_pager_set_n_rows(WnckPager*, int)</code><br>
	 * <i>native declaration : libwnck/pager.h:75</i>
	 *
	 * @param pager the pager
	 * @param n_rows the n rows
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_pager_set_n_rows(WnckPager pager, int n_rows);
	
	/**
	 * Original signature : <code>gboolean wnck_pager_set_orientation(WnckPager*, GtkOrientation)</code><br>
	 * <i>native declaration : libwnck/pager.h:73</i>
	 *
	 * @param pager the pager
	 * @param orientation the orientation
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_pager_set_orientation(WnckPager pager, int orientation);
	
	/**
	 * Original signature : <code>void wnck_pager_set_scroll_mode(WnckPager*, WnckPagerScrollMode)</code><br>
	 * <i>native declaration : libwnck/pager.h:79</i>
	 *
	 * @param pager the pager
	 * @param scroll_mode the scroll mode
	 */
	void wnck_pager_set_scroll_mode(WnckPager pager, int scroll_mode);
	
	/**
	 * Original signature : <code>void wnck_pager_set_shadow_type(WnckPager*, GtkShadowType)</code><br>
	 * <i>native declaration : libwnck/pager.h:83</i>
	 *
	 * @param pager the pager
	 * @param shadow_type the shadow type
	 */
	void wnck_pager_set_shadow_type(WnckPager pager, int shadow_type);
	
	/**
	 * Original signature : <code>void wnck_pager_set_show_all(WnckPager*, gboolean)</code><br>
	 * <i>native declaration : libwnck/pager.h:81</i>
	 *
	 * @param pager the pager
	 * @param show_all_workspaces the show all workspaces
	 */
	void wnck_pager_set_show_all(WnckPager pager, Wnck3Library.gboolean show_all_workspaces);
	
	/**
	 * Original signature : <code>void wnck_pager_set_wrap_on_scroll(WnckPager*, gboolean)</code><br>
	 * <i>native declaration : libwnck/pager.h:85</i>
	 *
	 * @param pager the pager
	 * @param wrap_on_scroll the wrap on scroll
	 */
	void wnck_pager_set_wrap_on_scroll(WnckPager pager, Wnck3Library.gboolean wrap_on_scroll);
	
	/**
	 * Original signature : <code>void wnck_pid_read_resource_usage(GdkDisplay*, gulong, WnckResourceUsage*)</code><br>
	 * <i>native declaration : libwnck/util.h:87</i><br>
	 *
	 * @param gdk_display the gdk display
	 * @param pid the pid
	 * @param usage the usage
	 * @deprecated use the safer method {@link #wnck_pid_read_resource_usage(com.sun.jna.ptr.PointerByReference, com.sun.jna.NativeLong, uk.co.bithatch.macrolib.wnck.WnckResourceUsage)} instead
	 */
	@Deprecated 
	void wnck_pid_read_resource_usage(Pointer gdk_display, NativeLong pid, WnckResourceUsage usage);
	
	/**
	 * Original signature : <code>void wnck_pid_read_resource_usage(GdkDisplay*, gulong, WnckResourceUsage*)</code><br>
	 * <i>native declaration : libwnck/util.h:87</i>
	 *
	 * @param gdk_display the gdk display
	 * @param pid the pid
	 * @param usage the usage
	 */
	void wnck_pid_read_resource_usage(PointerByReference gdk_display, NativeLong pid, WnckResourceUsage usage);
	
	/**
	 * Original signature : <code>void wnck_screen_calc_workspace_layout(WnckScreen*, int, int, WnckWorkspaceLayout*)</code><br>
	 * <i>native declaration : libwnck/screen.h:208</i>
	 *
	 * @param screen the screen
	 * @param num_workspaces the num workspaces
	 * @param space_index the space index
	 * @param layout the layout
	 */
	void wnck_screen_calc_workspace_layout(WnckScreen screen, int num_workspaces, int space_index, WnckWorkspaceLayout layout);
	
	/**
	 * Original signature : <code>void wnck_screen_change_workspace_count(WnckScreen*, int)</code><br>
	 * <i>native declaration : libwnck/screen.h:181</i>
	 *
	 * @param screen the screen
	 * @param count the count
	 */
	void wnck_screen_change_workspace_count(WnckScreen screen, int count);
	
	/**
	 * Original signature : <code>void wnck_screen_force_update(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:179</i>
	 *
	 * @param screen the screen
	 */
	void wnck_screen_force_update(WnckScreen screen);
	
	/**
	 * Original signature : <code>void wnck_screen_free_workspace_layout(WnckWorkspaceLayout*)</code><br>
	 * <i>native declaration : libwnck/screen.h:213</i>
	 *
	 * @param layout the layout
	 */
	void wnck_screen_free_workspace_layout(WnckWorkspaceLayout layout);
	
	/**
	 * Original signature : <code>WnckScreen* wnck_screen_get(int)</code><br>
	 * <i>native declaration : libwnck/screen.h:168</i>
	 *
	 * @param index the index
	 * @return the wnck screen
	 */
	WnckScreen wnck_screen_get(int index);
	
	/**
	 * Original signature : <code>WnckWindow* wnck_screen_get_active_window(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:175</i>
	 *
	 * @param screen the screen
	 * @return the wnck window
	 */
	WnckWindow wnck_screen_get_active_window(WnckScreen screen);
	
	/**
	 * Original signature : <code>WnckWorkspace* wnck_screen_get_active_workspace(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:173</i>
	 *
	 * @param screen the screen
	 * @return the wnck workspace
	 */
	WnckWorkspace wnck_screen_get_active_workspace(WnckScreen screen);
	
	/**
	 * Original signature : <code>gulong wnck_screen_get_background_pixmap(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:186</i>
	 *
	 * @param screen the screen
	 * @return the native long
	 */
	NativeLong wnck_screen_get_background_pixmap(WnckScreen screen);
	
	/**
	 * Original signature : <code>WnckScreen* wnck_screen_get_default()</code><br>
	 * <i>native declaration : libwnck/screen.h:167</i>
	 *
	 * @return the wnck screen
	 */
	WnckScreen wnck_screen_get_default();
	
	/**
	 * Original signature : <code>WnckScreen* wnck_screen_get_for_root(gulong)</code><br>
	 * <i>native declaration : libwnck/screen.h:169</i>
	 *
	 * @param root_window_id the root window id
	 * @return the wnck screen
	 */
	WnckScreen wnck_screen_get_for_root(NativeLong root_window_id);
	
	/**
	 * Original signature : <code>int wnck_screen_get_height(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:188</i>
	 *
	 * @param screen the screen
	 * @return the int
	 */
	int wnck_screen_get_height(WnckScreen screen);
	
	/**
	 * Original signature : <code>int wnck_screen_get_number(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:170</i>
	 *
	 * @param screen the screen
	 * @return the int
	 */
	int wnck_screen_get_number(WnckScreen screen);
	
	/**
	 * Original signature : <code>WnckWindow* wnck_screen_get_previously_active_window(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:176</i>
	 *
	 * @param screen the screen
	 * @return the wnck window
	 */
	WnckWindow wnck_screen_get_previously_active_window(WnckScreen screen);
	
	/**
	 * Original signature : <code>gboolean wnck_screen_get_showing_desktop(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:189</i>
	 *
	 * @param screen the screen
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_screen_get_showing_desktop(WnckScreen screen);
	
	/**
	 * Original signature : <code>GType wnck_screen_get_type()</code><br>
	 * <i>native declaration : libwnck/screen.h:165</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_screen_get_type();
	
	/**
	 * Original signature : <code>int wnck_screen_get_width(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:187</i>
	 *
	 * @param screen the screen
	 * @return the int
	 */
	int wnck_screen_get_width(WnckScreen screen);
	
	/**
	 * Original signature : <code>char* wnck_screen_get_window_manager_name(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:183</i>
	 *
	 * @param screen the screen
	 * @return the string
	 */
	String wnck_screen_get_window_manager_name(WnckScreen screen);
	
	/**
	 * Original signature : <code>GList* wnck_screen_get_windows(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:177</i>
	 *
	 * @param screen the screen
	 * @return the pointer by reference
	 */
	PointerByReference wnck_screen_get_windows(WnckScreen screen);
	
	/**
	 * Original signature : <code>GList* wnck_screen_get_windows_stacked(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:178</i>
	 *
	 * @param screen the screen
	 * @return the pointer by reference
	 */
	PointerByReference wnck_screen_get_windows_stacked(WnckScreen screen);
	
	/**
	 * Original signature : <code>WnckWorkspace* wnck_screen_get_workspace(WnckScreen*, int)</code><br>
	 * <i>native declaration : libwnck/screen.h:171</i>
	 *
	 * @param screen the screen
	 * @param workspace the workspace
	 * @return the wnck workspace
	 */
	WnckWorkspace wnck_screen_get_workspace(WnckScreen screen, int workspace);
	
	/**
	 * Original signature : <code>int wnck_screen_get_workspace_count(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:180</i>
	 *
	 * @param screen the screen
	 * @return the int
	 */
	int wnck_screen_get_workspace_count(WnckScreen screen);
	
	/**
	 * Original signature : <code>GList* wnck_screen_get_workspaces(WnckScreen*)</code><br>
	 * <i>native declaration : libwnck/screen.h:174</i>
	 *
	 * @param screen the screen
	 * @return the pointer by reference
	 */
	PointerByReference wnck_screen_get_workspaces(WnckScreen screen);
	
	/**
	 * Original signature : <code>void wnck_screen_move_viewport(WnckScreen*, int, int)</code><br>
	 * <i>native declaration : libwnck/screen.h:192</i>
	 *
	 * @param screen the screen
	 * @param x the x
	 * @param y the y
	 */
	void wnck_screen_move_viewport(WnckScreen screen, int x, int y);
	
	/**
	 * Original signature : <code>gboolean wnck_screen_net_wm_supports(WnckScreen*, const char*)</code><br>
	 * <i>native declaration : libwnck/screen.h:184</i><br>
	 *
	 * @param screen the screen
	 * @param atom the atom
	 * @return the wnck 3 library.gboolean
	 * @deprecated use the safer methods {@link #wnck_screen_net_wm_supports(uk.co.bithatch.macrolib.wnck.WnckScreen, java.lang.String)} and {@link #wnck_screen_net_wm_supports(uk.co.bithatch.macrolib.wnck.WnckScreen, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Wnck3Library.gboolean wnck_screen_net_wm_supports(WnckScreen screen, Pointer atom);
	
	/**
	 * Original signature : <code>gboolean wnck_screen_net_wm_supports(WnckScreen*, const char*)</code><br>
	 * <i>native declaration : libwnck/screen.h:184</i>
	 *
	 * @param screen the screen
	 * @param atom the atom
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_screen_net_wm_supports(WnckScreen screen, String atom);
	
	/**
	 * Original signature : <code>void wnck_screen_release_workspace_layout(WnckScreen*, int)</code><br>
	 * <i>native declaration : libwnck/screen.h:204</i>
	 *
	 * @param screen the screen
	 * @param current_token the current token
	 */
	void wnck_screen_release_workspace_layout(WnckScreen screen, int current_token);
	
	/**
	 * Original signature : <code>void wnck_screen_toggle_showing_desktop(WnckScreen*, gboolean)</code><br>
	 * <i>native declaration : libwnck/screen.h:190</i>
	 *
	 * @param screen the screen
	 * @param show the show
	 */
	void wnck_screen_toggle_showing_desktop(WnckScreen screen, Wnck3Library.gboolean show);
	
	/**
	 * Original signature : <code>int wnck_screen_try_set_workspace_layout(WnckScreen*, int, int, int)</code><br>
	 * <i>native declaration : libwnck/screen.h:200</i>
	 *
	 * @param screen the screen
	 * @param current_token the current token
	 * @param rows the rows
	 * @param columns the columns
	 * @return the int
	 */
	int wnck_screen_try_set_workspace_layout(WnckScreen screen, int current_token, int rows, int columns);
	
	/**
	 * Original signature : <code>GType wnck_selector_get_type()</code><br>
	 * <i>native declaration : libwnck/selector.h:37</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_selector_get_type();
	
	/**
	 * Original signature : <code>GtkWidget* wnck_selector_new()</code><br>
	 * <i>native declaration : libwnck/selector.h:36</i>
	 *
	 * @return the pointer by reference
	 */
	PointerByReference wnck_selector_new();
	
	/**
	 * Original signature : <code>void wnck_set_client_type(WnckClientType)</code><br>
	 * <i>native declaration : libwnck/util.h:73</i>
	 *
	 * @param ewmh_sourceindication_client_type the ewmh sourceindication client type
	 */
	void wnck_set_client_type(int ewmh_sourceindication_client_type);
	
	/**
	 * Original signature : <code>void wnck_set_default_icon_size(gsize)</code><br>
	 * <i>native declaration : libwnck/util.h:78</i>
	 *
	 * @param size the size
	 */
	void wnck_set_default_icon_size(Wnck3Library.gsize size);
	
	/**
	 * Original signature : <code>void wnck_set_default_mini_icon_size(gsize)</code><br>
	 * <i>native declaration : libwnck/util.h:79</i>
	 *
	 * @param size the size
	 */
	void wnck_set_default_mini_icon_size(Wnck3Library.gsize size);
	
	/**
	 * Original signature : <code>void wnck_shutdown()</code><br>
	 * <i>native declaration : libwnck/util.h:81</i>
	 */
	void wnck_shutdown();
	
	/**
	 * Original signature : <code>gboolean wnck_tasklist_get_scroll_enabled(WnckTasklist*)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:80</i>
	 *
	 * @param tasklist the tasklist
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_tasklist_get_scroll_enabled(WnckTasklist tasklist);
	
	/**
	 * Original signature : <code>int* wnck_tasklist_get_size_hint_list(WnckTasklist*, int*)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:61</i>
	 *
	 * @param tasklist the tasklist
	 * @param n_elements the n elements
	 * @return the int by reference
	 */
	IntByReference wnck_tasklist_get_size_hint_list(WnckTasklist tasklist, IntBuffer n_elements);
	
	/**
	 * Original signature : <code>int* wnck_tasklist_get_size_hint_list(WnckTasklist*, int*)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:61</i><br>
	 *
	 * @param tasklist the tasklist
	 * @param n_elements the n elements
	 * @return the int by reference
	 * @deprecated use the safer methods {@link #wnck_tasklist_get_size_hint_list(uk.co.bithatch.macrolib.wnck.WnckTasklist, java.nio.IntBuffer)} and {@link #wnck_tasklist_get_size_hint_list(uk.co.bithatch.macrolib.wnck.WnckTasklist, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	IntByReference wnck_tasklist_get_size_hint_list(WnckTasklist tasklist, IntByReference n_elements);
	
	/**
	 * Original signature : <code>GType wnck_tasklist_get_type()</code><br>
	 * <i>native declaration : libwnck/tasklist.h:58</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_tasklist_get_type();
	
	/**
	 * enumerations from "tasklist.h"<br>
	 * Original signature : <code>GType wnck_tasklist_grouping_type_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:28</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_tasklist_grouping_type_get_type();
	
	/**
	 * Original signature : <code>GtkWidget* wnck_tasklist_new()</code><br>
	 * <i>native declaration : libwnck/tasklist.h:60</i>
	 *
	 * @return the pointer by reference
	 */
	PointerByReference wnck_tasklist_new();
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_button_relief(WnckTasklist*, GtkReliefStyle)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:74</i>
	 *
	 * @param tasklist the tasklist
	 * @param relief the relief
	 */
	void wnck_tasklist_set_button_relief(WnckTasklist tasklist, int relief);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_grouping(WnckTasklist*, WnckTasklistGroupingType)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:64</i>
	 *
	 * @param tasklist the tasklist
	 * @param grouping the grouping
	 */
	void wnck_tasklist_set_grouping(WnckTasklist tasklist, int grouping);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_grouping_limit(WnckTasklist*, gint)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:70</i>
	 *
	 * @param tasklist the tasklist
	 * @param limit the limit
	 */
	void wnck_tasklist_set_grouping_limit(WnckTasklist tasklist, Wnck3Library.gint limit);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_icon_loader(WnckTasklist*, WnckLoadIconFunction, void*, GDestroyNotify)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:104</i>
	 *
	 * @param tasklist the tasklist
	 * @param load_icon_func the load icon func
	 * @param data the data
	 * @param free_data_func the free data func
	 */
	void wnck_tasklist_set_icon_loader(WnckTasklist tasklist, Wnck3Library.WnckLoadIconFunction load_icon_func, Pointer data, Pointer free_data_func);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_include_all_workspaces(WnckTasklist*, gboolean)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:72</i>
	 *
	 * @param tasklist the tasklist
	 * @param include_all_workspaces the include all workspaces
	 */
	void wnck_tasklist_set_include_all_workspaces(WnckTasklist tasklist, Wnck3Library.gboolean include_all_workspaces);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_middle_click_close(WnckTasklist*, gboolean)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:68</i>
	 *
	 * @param tasklist the tasklist
	 * @param middle_click_close the middle click close
	 */
	void wnck_tasklist_set_middle_click_close(WnckTasklist tasklist, Wnck3Library.gboolean middle_click_close);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_orientation(WnckTasklist*, GtkOrientation)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:76</i>
	 *
	 * @param tasklist the tasklist
	 * @param orient the orient
	 */
	void wnck_tasklist_set_orientation(WnckTasklist tasklist, int orient);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_scroll_enabled(WnckTasklist*, gboolean)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:78</i>
	 *
	 * @param tasklist the tasklist
	 * @param scroll_enabled the scroll enabled
	 */
	void wnck_tasklist_set_scroll_enabled(WnckTasklist tasklist, Wnck3Library.gboolean scroll_enabled);
	
	/**
	 * Original signature : <code>void wnck_tasklist_set_switch_workspace_on_unminimize(WnckTasklist*, gboolean)</code><br>
	 * <i>native declaration : libwnck/tasklist.h:66</i>
	 *
	 * @param tasklist the tasklist
	 * @param switch_workspace_on_unminimize the switch workspace on unminimize
	 */
	void wnck_tasklist_set_switch_workspace_on_unminimize(WnckTasklist tasklist, Wnck3Library.gboolean switch_workspace_on_unminimize);
	
	/**
	 * Original signature : <code>GType wnck_window_actions_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:44</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_window_actions_get_type();
	
	/**
	 * Original signature : <code>void wnck_window_activate(WnckWindow*, guint32)</code><br>
	 * <i>native declaration : libwnck/window.h:370</i>
	 *
	 * @param window the window
	 * @param timestamp the timestamp
	 */
	void wnck_window_activate(WnckWindow window, Wnck3Library.guint32 timestamp);
	
	/**
	 * Original signature : <code>void wnck_window_activate_transient(WnckWindow*, guint32)</code><br>
	 * <i>native declaration : libwnck/window.h:374</i>
	 *
	 * @param window the window
	 * @param timestamp the timestamp
	 */
	void wnck_window_activate_transient(WnckWindow window, Wnck3Library.guint32 timestamp);
	
	/**
	 * Original signature : <code>void wnck_window_close(WnckWindow*, guint32)</code><br>
	 * <i>native declaration : libwnck/window.h:339</i>
	 *
	 * @param window the window
	 * @param timestamp the timestamp
	 */
	void wnck_window_close(WnckWindow window, Wnck3Library.guint32 timestamp);
	
	/**
	 * Original signature : <code>WnckWindow* wnck_window_get(gulong)</code><br>
	 * <i>native declaration : libwnck/window.h:287</i>
	 *
	 * @param xwindow the xwindow
	 * @return the wnck window
	 */
	WnckWindow wnck_window_get(NativeLong xwindow);
	
	/**
	 * Original signature : <code>WnckWindowActions wnck_window_get_actions(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:389</i>
	 *
	 * @param window the window
	 * @return the int
	 */
	int wnck_window_get_actions(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckApplication* wnck_window_get_application(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:296</i>
	 *
	 * @param window the window
	 * @return the wnck application
	 */
	WnckApplication wnck_window_get_application(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckClassGroup* wnck_window_get_class_group(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:301</i>
	 *
	 * @param window the window
	 * @return the wnck class group
	 */
	WnckClassGroup wnck_window_get_class_group(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_class_group_name(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:303</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_class_group_name(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_class_instance_name(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:304</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_class_instance_name(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_get_client_window_geometry(WnckWindow*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : libwnck/window.h:392</i>
	 *
	 * @param window the window
	 * @param xp the xp
	 * @param yp the yp
	 * @param widthp the widthp
	 * @param heightp the heightp
	 */
	void wnck_window_get_client_window_geometry(WnckWindow window, IntBuffer xp, IntBuffer yp, IntBuffer widthp, IntBuffer heightp);
	
	/**
	 * Original signature : <code>void wnck_window_get_client_window_geometry(WnckWindow*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : libwnck/window.h:392</i><br>
	 *
	 * @param window the window
	 * @param xp the xp
	 * @param yp the yp
	 * @param widthp the widthp
	 * @param heightp the heightp
	 * @deprecated use the safer methods {@link #wnck_window_get_client_window_geometry(uk.co.bithatch.macrolib.wnck.WnckWindow, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #wnck_window_get_client_window_geometry(uk.co.bithatch.macrolib.wnck.WnckWindow, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void wnck_window_get_client_window_geometry(WnckWindow window, IntByReference xp, IntByReference yp, IntByReference widthp, IntByReference heightp);
	
	/**
	 * Original signature : <code>void wnck_window_get_geometry(WnckWindow*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : libwnck/window.h:397</i>
	 *
	 * @param window the window
	 * @param xp the xp
	 * @param yp the yp
	 * @param widthp the widthp
	 * @param heightp the heightp
	 */
	void wnck_window_get_geometry(WnckWindow window, IntBuffer xp, IntBuffer yp, IntBuffer widthp, IntBuffer heightp);
	
	/**
	 * Original signature : <code>void wnck_window_get_geometry(WnckWindow*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : libwnck/window.h:397</i><br>
	 *
	 * @param window the window
	 * @param xp the xp
	 * @param yp the yp
	 * @param widthp the widthp
	 * @param heightp the heightp
	 * @deprecated use the safer methods {@link #wnck_window_get_geometry(uk.co.bithatch.macrolib.wnck.WnckWindow, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #wnck_window_get_geometry(uk.co.bithatch.macrolib.wnck.WnckWindow, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void wnck_window_get_geometry(WnckWindow window, IntByReference xp, IntByReference yp, IntByReference widthp, IntByReference heightp);
	
	/**
	 * Original signature : <code>gulong wnck_window_get_group_leader(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:298</i>
	 *
	 * @param window the window
	 * @return the native long
	 */
	NativeLong wnck_window_get_group_leader(WnckWindow window);
	
	/**
	 * Original signature : <code>GdkPixbuf* wnck_window_get_icon(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:378</i>
	 *
	 * @param window the window
	 * @return the pointer by reference
	 */
	PointerByReference wnck_window_get_icon(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_get_icon_is_fallback(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:381</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_get_icon_is_fallback(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_icon_name(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:294</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_icon_name(WnckWindow window);
	
	/**
	 * Original signature : <code>GdkPixbuf* wnck_window_get_mini_icon(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:379</i>
	 *
	 * @param window the window
	 * @return the pointer by reference
	 */
	PointerByReference wnck_window_get_mini_icon(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_name(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:292</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_name(WnckWindow window);
	
	/**
	 * Original signature : <code>int wnck_window_get_pid(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:309</i>
	 *
	 * @param window the window
	 * @return the int
	 */
	int wnck_window_get_pid(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_role(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:308</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_role(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckScreen* wnck_window_get_screen(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:289</i>
	 *
	 * @param window the window
	 * @return the wnck screen
	 */
	WnckScreen wnck_window_get_screen(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_session_id(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:306</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_session_id(WnckWindow window);
	
	/**
	 * Original signature : <code>char* wnck_window_get_session_id_utf8(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:307</i>
	 *
	 * @param window the window
	 * @return the string
	 */
	String wnck_window_get_session_id_utf8(WnckWindow window);
	
	/**
	 * Original signature : <code>gint wnck_window_get_sort_order(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:310</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gint
	 */
	Wnck3Library.gint wnck_window_get_sort_order(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckWindowState wnck_window_get_state(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:390</i>
	 *
	 * @param window the window
	 * @return the int
	 */
	int wnck_window_get_state(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckWindow* wnck_window_get_transient(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:297</i>
	 *
	 * @param window the window
	 * @return the wnck window
	 */
	WnckWindow wnck_window_get_transient(WnckWindow window);
	
	/**
	 * Original signature : <code>GType wnck_window_get_type()</code><br>
	 * <i>native declaration : libwnck/window.h:285</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_window_get_type();
	
	/**
	 * Original signature : <code>WnckWindowType wnck_window_get_window_type(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:314</i>
	 *
	 * @param window the window
	 * @return the int
	 */
	int wnck_window_get_window_type(WnckWindow window);
	
	/**
	 * Original signature : <code>WnckWorkspace* wnck_window_get_workspace(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:361</i>
	 *
	 * @param window the window
	 * @return the wnck workspace
	 */
	WnckWorkspace wnck_window_get_workspace(WnckWindow window);
	
	/**
	 * Original signature : <code>gulong wnck_window_get_xid(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:299</i>
	 *
	 * @param window the window
	 * @return the native long
	 */
	NativeLong wnck_window_get_xid(WnckWindow window);
	
	/**
	 * Original signature : <code>GType wnck_window_gravity_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:52</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_window_gravity_get_type();
	
	/**
	 * Original signature : <code>gboolean wnck_window_has_icon_name(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:293</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_has_icon_name(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_has_name(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:291</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_has_name(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_above(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:323</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_above(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_active(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:372</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_active(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_below(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:324</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_below(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_fullscreen(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:327</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_fullscreen(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_in_viewport(WnckWindow*, WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/window.h:414</i>
	 *
	 * @param window the window
	 * @param workspace the workspace
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_in_viewport(WnckWindow window, WnckWorkspace workspace);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_maximized(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:321</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_maximized(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_maximized_horizontally(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:319</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_maximized_horizontally(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_maximized_vertically(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:320</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_maximized_vertically(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_minimized(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:318</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_minimized(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_most_recently_activated(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:373</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_most_recently_activated(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_on_workspace(WnckWindow*, WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/window.h:412</i>
	 *
	 * @param window the window
	 * @param workspace the workspace
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_on_workspace(WnckWindow window, WnckWorkspace workspace);
	
	/**
	 * pinned = on all workspaces<br>
	 * Original signature : <code>gboolean wnck_window_is_pinned(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:366</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_pinned(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_shaded(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:322</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_shaded(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_skip_pager(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:325</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_skip_pager(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_skip_tasklist(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:326</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_skip_tasklist(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_sticky(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:328</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_sticky(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_is_visible_on_workspace(WnckWindow*, WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/window.h:410</i>
	 *
	 * @param window the window
	 * @param workspace the workspace
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_is_visible_on_workspace(WnckWindow window, WnckWorkspace workspace);
	
	/**
	 * Original signature : <code>void wnck_window_keyboard_move(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:358</i>
	 *
	 * @param window the window
	 */
	void wnck_window_keyboard_move(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_keyboard_size(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:359</i>
	 *
	 * @param window the window
	 */
	void wnck_window_keyboard_size(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_make_above(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:352</i>
	 *
	 * @param window the window
	 */
	void wnck_window_make_above(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_make_below(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:354</i>
	 *
	 * @param window the window
	 */
	void wnck_window_make_below(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_maximize(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:344</i>
	 *
	 * @param window the window
	 */
	void wnck_window_maximize(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_maximize_horizontally(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:346</i>
	 *
	 * @param window the window
	 */
	void wnck_window_maximize_horizontally(WnckWindow window);
	/**
	 * Original signature : <code>void wnck_window_maximize_vertically(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:348</i>
	 *
	 * @param window the window
	 */
	void wnck_window_maximize_vertically(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_minimize(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:341</i>
	 *
	 * @param window the window
	 */
	void wnck_window_minimize(WnckWindow window);
	
	/**
	 * Original signature : <code>GType wnck_window_move_resize_mask_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:56</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_window_move_resize_mask_get_type();
	
	/**
	 * Original signature : <code>void wnck_window_move_to_workspace(WnckWindow*, WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/window.h:362</i>
	 *
	 * @param window the window
	 * @param space the space
	 */
	void wnck_window_move_to_workspace(WnckWindow window, WnckWorkspace space);
	
	/**
	 * Original signature : <code>gboolean wnck_window_needs_attention(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:329</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_needs_attention(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_or_transient_needs_attention(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:330</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_or_transient_needs_attention(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_pin(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:367</i>
	 *
	 * @param window the window
	 */
	void wnck_window_pin(WnckWindow window);
	
	/**
	 * Original signature : <code>void wnck_window_set_fullscreen(WnckWindow*, gboolean)</code><br>
	 * <i>native declaration : libwnck/window.h:336</i>
	 *
	 * @param window the window
	 * @param fullscreen the fullscreen
	 */
	void wnck_window_set_fullscreen(WnckWindow window, Wnck3Library.gboolean fullscreen);
	
	/**
	 * Original signature : <code>void wnck_window_set_geometry(WnckWindow*, WnckWindowGravity, WnckWindowMoveResizeMask, int, int, int, int)</code><br>
	 * <i>native declaration : libwnck/window.h:402</i>
	 *
	 * @param window the window
	 * @param gravity the gravity
	 * @param geometry_mask the geometry mask
	 * @param x the x
	 * @param y the y
	 * @param width the width
	 * @param height the height
	 */
	void wnck_window_set_geometry(WnckWindow window, int gravity, int geometry_mask, int x, int y, int width, int height);
	
	/**
	 * Original signature : <code>void wnck_window_set_icon_geometry(WnckWindow*, int, int, int, int)</code><br>
	 * <i>native declaration : libwnck/window.h:383</i>
	 *
	 * @param window the window
	 * @param x the x
	 * @param y the y
	 * @param width the width
	 * @param height the height
	 */
	void wnck_window_set_icon_geometry(WnckWindow window, int x, int y, int width, int height);
	
	/**
	 * Original signature : <code>void wnck_window_set_skip_pager(WnckWindow*, gboolean)</code><br>
	 * <i>native declaration : libwnck/window.h:332</i>
	 *
	 * @param window the window
	 * @param skip the skip
	 */
	void wnck_window_set_skip_pager(WnckWindow window, Wnck3Library.gboolean skip);
	
	/**
	 * Original signature : <code>void wnck_window_set_skip_tasklist(WnckWindow*, gboolean)</code><br>
	 * <i>native declaration : libwnck/window.h:334</i>
	 *
	 * @param window the window
	 * @param skip the skip
	 */
	void wnck_window_set_skip_tasklist(WnckWindow window, Wnck3Library.gboolean skip);
	
	/**
	 * Original signature : <code>void wnck_window_set_sort_order(WnckWindow*, gint)</code><br>
	 * <i>native declaration : libwnck/window.h:311</i>
	 *
	 * @param window the window
	 * @param order the order
	 */
	void wnck_window_set_sort_order(WnckWindow window, Wnck3Library.gint order);
	
	/**
	 * Original signature : <code>void wnck_window_set_window_type(WnckWindow*, WnckWindowType)</code><br>
	 * <i>native declaration : libwnck/window.h:315</i>
	 *
	 * @param window the window
	 * @param wintype the wintype
	 */
	void wnck_window_set_window_type(WnckWindow window, int wintype);
	
	/**
	 * Original signature : <code>void wnck_window_shade(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:350</i>
	 *
	 * @param window the window
	 */
	void wnck_window_shade(WnckWindow window);
	
	/**
	 * enumerations from "window.h"<br>
	 * Original signature : <code>GType wnck_window_state_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:40</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_window_state_get_type();
	
	/**
	 * Original signature : <code>void wnck_window_stick(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:356</i>
	 *
	 * @param window the window
	 */
	void wnck_window_stick(WnckWindow window);
	
	/**
	 * Original signature : <code>gboolean wnck_window_transient_is_most_recently_activated(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:376</i>
	 *
	 * @param window the window
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_window_transient_is_most_recently_activated(WnckWindow window);;
	
	/**
	 * Original signature : <code>GType wnck_window_type_get_type()</code><br>
	 * <i>native declaration : libwnck/wnck-enum-types.h:48</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_window_type_get_type();;
	
	/**
	 * Original signature : <code>void wnck_window_unmake_above(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:353</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unmake_above(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unmake_below(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:355</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unmake_below(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unmaximize(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:345</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unmaximize(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unmaximize_horizontally(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:347</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unmaximize_horizontally(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unmaximize_vertically(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:349</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unmaximize_vertically(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unminimize(WnckWindow*, guint32)</code><br>
	 * <i>native declaration : libwnck/window.h:342</i>
	 *
	 * @param window the window
	 * @param timestamp the timestamp
	 */
	void wnck_window_unminimize(WnckWindow window, Wnck3Library.guint32 timestamp);;
	
	/**
	 * Original signature : <code>void wnck_window_unpin(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:368</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unpin(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unshade(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:351</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unshade(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_window_unstick(WnckWindow*)</code><br>
	 * <i>native declaration : libwnck/window.h:357</i>
	 *
	 * @param window the window
	 */
	void wnck_window_unstick(WnckWindow window);;
	
	/**
	 * Original signature : <code>void wnck_workspace_activate(WnckWorkspace*, guint32)</code><br>
	 * <i>native declaration : libwnck/workspace.h:70</i>
	 *
	 * @param space the space
	 * @param timestamp the timestamp
	 */
	void wnck_workspace_activate(WnckWorkspace space, Wnck3Library.guint32 timestamp);;
	
	/**
	 * Original signature : <code>void wnck_workspace_change_name(WnckWorkspace*, const char*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:67</i><br>
	 *
	 * @param space the space
	 * @param name the name
	 * @deprecated use the safer methods {@link #wnck_workspace_change_name(uk.co.bithatch.macrolib.wnck.WnckWorkspace, java.lang.String)} and {@link #wnck_workspace_change_name(uk.co.bithatch.macrolib.wnck.WnckWorkspace, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void wnck_workspace_change_name(WnckWorkspace space, Pointer name);;
	
	/**
	 * Original signature : <code>void wnck_workspace_change_name(WnckWorkspace*, const char*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:67</i>
	 *
	 * @param space the space
	 * @param name the name
	 */
	void wnck_workspace_change_name(WnckWorkspace space, String name);;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_height(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:73</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_height(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_layout_column(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:80</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_layout_column(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_layout_row(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:79</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_layout_row(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>char* wnck_workspace_get_name(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:66</i>
	 *
	 * @param space the space
	 * @return the string
	 */
	String wnck_workspace_get_name(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>WnckWorkspace* wnck_workspace_get_neighbor(WnckWorkspace*, WnckMotionDirection)</code><br>
	 * <i>native declaration : libwnck/workspace.h:81</i>
	 *
	 * @param space the space
	 * @param direction the direction
	 * @return the wnck workspace
	 */
	WnckWorkspace wnck_workspace_get_neighbor(WnckWorkspace space, int direction);;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_number(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:65</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_number(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>WnckScreen* wnck_workspace_get_screen(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:69</i>
	 *
	 * @param space the space
	 * @return the wnck screen
	 */
	WnckScreen wnck_workspace_get_screen(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>GType wnck_workspace_get_type()</code><br>
	 * <i>native declaration : libwnck/workspace.h:63</i>
	 *
	 * @return the wnck 3 library. G type
	 */
	Wnck3Library.GType wnck_workspace_get_type();;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_viewport_x(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:74</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_viewport_x(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_viewport_y(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:75</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_viewport_y(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>int wnck_workspace_get_width(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:72</i>
	 *
	 * @param space the space
	 * @return the int
	 */
	int wnck_workspace_get_width(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>gboolean wnck_workspace_is_virtual(WnckWorkspace*)</code><br>
	 * <i>native declaration : libwnck/workspace.h:76</i>
	 *
	 * @param space the space
	 * @return the wnck 3 library.gboolean
	 */
	Wnck3Library.gboolean wnck_workspace_is_virtual(WnckWorkspace space);;
	
	/**
	 * Original signature : <code>void wnck_xid_read_resource_usage(GdkDisplay*, gulong, WnckResourceUsage*)</code><br>
	 * <i>native declaration : libwnck/util.h:83</i><br>
	 *
	 * @param gdk_display the gdk display
	 * @param xid the xid
	 * @param usage the usage
	 * @deprecated use the safer method {@link #wnck_xid_read_resource_usage(com.sun.jna.ptr.PointerByReference, com.sun.jna.NativeLong, uk.co.bithatch.macrolib.wnck.WnckResourceUsage)} instead
	 */
	@Deprecated 
	void wnck_xid_read_resource_usage(Pointer gdk_display, NativeLong xid, WnckResourceUsage usage);;
	
	/**
	 * Original signature : <code>void wnck_xid_read_resource_usage(GdkDisplay*, gulong, WnckResourceUsage*)</code><br>
	 * <i>native declaration : libwnck/util.h:83</i>
	 *
	 * @param gdk_display the gdk display
	 * @param xid the xid
	 * @param usage the usage
	 */
	void wnck_xid_read_resource_usage(PointerByReference gdk_display, NativeLong xid, WnckResourceUsage usage);;
}
