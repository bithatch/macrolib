/**
 * Java WNCK bindings
 * Copyright Â© 2020 Bithatch (tanktarta@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package uk.co.bithatch.macrolib.wnck;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Structure.FieldOrder;

import uk.co.bithatch.macrolib.wnck.Wnck3Library.GObjectClass;

/**
 * <i>native declaration : libwnck/screen.h:36</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@FieldOrder({"parent_class", "active_window_changed", "active_workspace_changed", "window_stacking_changed", "window_opened", "window_closed", "workspace_created", "workspace_destroyed", "application_opened", "application_closed", "background_changed", "class_group_opened", "class_group_closed", "showing_desktop_changed", "viewports_changed", "window_manager_changed", "pad2", "pad3", "pad4", "pad5", "pad6"})
public class WnckScreenClass extends Structure {
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface active_window_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param previous_window the previous window
		 */
		void apply(WnckScreen screen, WnckWindow previous_window);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface active_workspace_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param previous_workspace the previous workspace
		 */
		void apply(WnckScreen screen, WnckWorkspace previous_workspace);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface application_closed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param app the app
		 */
		void apply(WnckScreen screen, WnckApplication app);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface application_opened_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param app the app
		 */
		void apply(WnckScreen screen, WnckApplication app);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface background_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 */
		void apply(WnckScreen screen);
	}
	
	/**
	 * The Class ByReference.
	 */
	public static class ByReference extends WnckScreenClass implements Structure.ByReference {
		
	}
	
	/**
	 * The Class ByValue.
	 */
	public static class ByValue extends WnckScreenClass implements Structure.ByValue {
		
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface class_group_closed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param class_group the class group
		 */
		void apply(WnckScreen screen, WnckClassGroup class_group);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface class_group_opened_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param class_group the class group
		 */
		void apply(WnckScreen screen, WnckClassGroup class_group);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface pad2_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface pad3_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface pad4_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface pad5_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface pad6_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface showing_desktop_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 */
		void apply(WnckScreen screen);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface viewports_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 */
		void apply(WnckScreen screen);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface window_closed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param window the window
		 */
		void apply(WnckScreen screen, WnckWindow window);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface window_manager_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 */
		void apply(WnckScreen screen);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface window_opened_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param window the window
		 */
		void apply(WnckScreen screen, WnckWindow window);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface window_stacking_changed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 */
		void apply(WnckScreen screen);
	}
	
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface workspace_created_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param space the space
		 */
		void apply(WnckScreen screen, WnckWorkspace space);
	}
	/** <i>native declaration : libwnck/screen.h</i> */
	public interface workspace_destroyed_callback extends Callback {
		
		/**
		 * Apply.
		 *
		 * @param screen the screen
		 * @param space the space
		 */
		void apply(WnckScreen screen, WnckWorkspace space);
	};
	/**  C type : active_window_changed_callback*. */
	public WnckScreenClass.active_window_changed_callback active_window_changed;;
	/**  C type : active_workspace_changed_callback*. */
	public WnckScreenClass.active_workspace_changed_callback active_workspace_changed;;
	/**  C type : application_closed_callback*. */
	public WnckScreenClass.application_closed_callback application_closed;;
	/**  C type : application_opened_callback*. */
	public WnckScreenClass.application_opened_callback application_opened;;
	/**  C type : background_changed_callback*. */
	public WnckScreenClass.background_changed_callback background_changed;;
	/**  C type : class_group_closed_callback*. */
	public WnckScreenClass.class_group_closed_callback class_group_closed;;
	/**  C type : class_group_opened_callback*. */
	public WnckScreenClass.class_group_opened_callback class_group_opened;;
	/**  C type : pad2_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad2_callback pad2;;
	/**  C type : pad3_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad3_callback pad3;;
	/**  C type : pad4_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad4_callback pad4;;
	/**  C type : pad5_callback*. */
	public WnckScreenClass.pad5_callback pad5;;
	/**  C type : pad6_callback*. */
	public WnckScreenClass.pad6_callback pad6;;
	/**  C type : GObjectClass. */
	public GObjectClass parent_class;;
	/**  C type : showing_desktop_changed_callback*. */
	public WnckScreenClass.showing_desktop_changed_callback showing_desktop_changed;;
	/**  C type : viewports_changed_callback*. */
	public WnckScreenClass.viewports_changed_callback viewports_changed;;
	/**  C type : window_closed_callback*. */
	public WnckScreenClass.window_closed_callback window_closed;;
	/**  C type : window_manager_changed_callback*. */
	public WnckScreenClass.window_manager_changed_callback window_manager_changed;;
	/**  C type : window_opened_callback*. */
	public WnckScreenClass.window_opened_callback window_opened;;
	/**  C type : window_stacking_changed_callback*. */
	public WnckScreenClass.window_stacking_changed_callback window_stacking_changed;;
	
	/**  C type : workspace_created_callback*. */
	public WnckScreenClass.workspace_created_callback workspace_created;
	
	/**  C type : workspace_destroyed_callback*. */
	public WnckScreenClass.workspace_destroyed_callback workspace_destroyed;
	
	/**
	 * Instantiates a new wnck screen class.
	 */
	public WnckScreenClass() {
		super();
	};
	
	/**
	 * Instantiates a new wnck screen class.
	 *
	 * @param peer the peer
	 */
	public WnckScreenClass(Pointer peer) {
		super(peer);
	};
}
