/**
 * Java WNCK bindings
 * Copyright Â© 2020 Bithatch (tanktarta@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package uk.co.bithatch.macrolib.wnck;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Structure.FieldOrder;

import uk.co.bithatch.macrolib.wnck.Wnck3Library.GtkMenuBarClass;

/**
 * <i>native declaration : libwnck/selector.h:25</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@FieldOrder({"parent_class", "pad1", "pad2", "pad3", "pad4"})
public class WnckSelectorClass extends Structure {
	
	/**
	 * The Class ByReference.
	 */
	public static class ByReference extends WnckSelectorClass implements Structure.ByReference {
		
	}
	
	/**
	 * The Class ByValue.
	 */
	public static class ByValue extends WnckSelectorClass implements Structure.ByValue {
		
	}
	
	/** <i>native declaration : libwnck/selector.h</i> */
	public interface pad1_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/selector.h</i> */
	public interface pad2_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	
	/** <i>native declaration : libwnck/selector.h</i> */
	public interface pad3_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	}
	/** <i>native declaration : libwnck/selector.h</i> */
	public interface pad4_callback extends Callback {
		
		/**
		 * Apply.
		 */
		void apply();
	};
	/**  C type : pad1_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad1_callback pad1;;
	/**  C type : pad2_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad2_callback pad2;;
	/**  C type : pad3_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad3_callback pad3;;
	
	/**  C type : pad4_callback*. */
	public uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad4_callback pad4;
	
	/**  C type : GtkMenuBarClass. */
	public GtkMenuBarClass parent_class;
	
	/**
	 * Instantiates a new wnck selector class.
	 */
	public WnckSelectorClass() {
		super();
	}
	
	/**
	 * Instantiates a new wnck selector class.
	 *
	 * @param parent_class C type : GtkMenuBarClass<br>
	 * @param pad1 C type : pad1_callback*<br>
	 * @param pad2 C type : pad2_callback*<br>
	 * @param pad3 C type : pad3_callback*<br>
	 * @param pad4 C type : pad4_callback*
	 */
	public WnckSelectorClass(GtkMenuBarClass parent_class, uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad1_callback pad1, uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad2_callback pad2, uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad3_callback pad3, uk.co.bithatch.macrolib.wnck.WnckActionMenuClass.pad4_callback pad4) {
		super();
		this.parent_class = parent_class;
		this.pad1 = pad1;
		this.pad2 = pad2;
		this.pad3 = pad3;
		this.pad4 = pad4;
	};
	
	/**
	 * Instantiates a new wnck selector class.
	 *
	 * @param peer the peer
	 */
	public WnckSelectorClass(Pointer peer) {
		super(peer);
	};
}
